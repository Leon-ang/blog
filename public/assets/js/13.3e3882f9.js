(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{566:function(t,s,r){"use strict";r.r(s);var v=r(13),_=Object(v.a)({},(function(){var t=this,s=t.$createElement,r=t._self._c||s;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h2",{attrs:{id:"hittp和https的区别"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#hittp和https的区别"}},[t._v("#")]),t._v(" HITTP和HTTPS的区别")]),t._v(" "),r("ul",[r("li",[r("strong",[t._v("http传输过程中是明文传输，不安全的。所以需要https进行加密传输")])])]),t._v(" "),r("h2",{attrs:{id:"浏览器渲染机制"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#浏览器渲染机制"}},[t._v("#")]),t._v(" 浏览器渲染机制")]),t._v(" "),r("h5",{attrs:{id:"浏览器请求、加载、渲染一个页面的耗时任务主要有"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#浏览器请求、加载、渲染一个页面的耗时任务主要有"}},[t._v("#")]),t._v(" 浏览器请求、加载、渲染一个页面的耗时任务主要有：")]),t._v(" "),r("p",[r("strong",[t._v("①DNS 解析查询")]),t._v(" "),r("strong",[t._v("②TCP/IP 连接")]),t._v(" "),r("strong",[t._v("③HTTP 请求和响应")]),t._v(" "),r("strong",[t._v("④服务器响应")]),t._v(" "),r("strong",[t._v("⑤客户端渲染")])]),t._v(" "),r("h5",{attrs:{id:"客户端渲染也就是我们说的浏览器渲染-主要包括以下几步"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#客户端渲染也就是我们说的浏览器渲染-主要包括以下几步"}},[t._v("#")]),t._v(" 客户端渲染也就是我们说的浏览器渲染，主要包括以下几步")]),t._v(" "),r("p",[r("strong",[t._v("①解析HTML生成DOM树")]),t._v(" "),r("strong",[t._v("②解析CSS生成CSSOM规则树")]),t._v(" "),r("strong",[t._v("③将DOM树与CSSOM规则树合并在一起生成渲染树")]),t._v(" "),r("strong",[t._v("④遍历渲染树开始布局，计算每个节点的位置大小信息")]),t._v(" "),r("strong",[t._v("⑤将渲染树每个节点绘制到屏幕")])]),t._v(" "),r("h2",{attrs:{id:"事件循环"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#事件循环"}},[t._v("#")]),t._v(" 事件循环")]),t._v(" "),r("p",[r("strong",[t._v("因为js是单线程语言，当遇到异步任务(如ajax操作等)时，不可能一直等待异步完成，再继续往下执行。")])]),t._v(" "),r("h4",{attrs:{id:"执行栈"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#执行栈"}},[t._v("#")]),t._v(" 执行栈")]),t._v(" "),r("p",[r("strong",[t._v("当执行某个函数、用户点击一次鼠标，Ajax完成，一个图片加载完成等事件发生时，只要指定过回调函数，这些事件发生时就会进入任务队列中，等待主线程读取,遵循先进先出原则。")])]),t._v(" "),r("p",[r("strong",[t._v("执行任务队列中的某个任务，这个被执行的任务就称为执行栈。")])]),t._v(" "),r("h4",{attrs:{id:"主线程"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#主线程"}},[t._v("#")]),t._v(" 主线程")]),t._v(" "),r("p",[r("strong",[t._v("要明确的一点是，主线程跟执行栈是不同概念，主线程规定现在执行执行栈中的哪个事件。")])]),t._v(" "),r("p",[r("strong",[t._v("主线程循环：即主线程会不停的从执行栈中读取事件，会执行完所有栈中的同步代码。")])]),t._v(" "),r("p",[r("strong",[t._v("当遇到一个异步事件后，并不会一直等待异步事件返回结果，而是会将这个事件挂在与执行栈不同的队列中，我们称之为任务队列(Task Queue)。")])]),t._v(" "),r("p",[r("strong",[t._v("当主线程将执行栈中所有的代码执行完之后，主线程将会去查看任务队列是否有任务。如果有，那么主线程会依次执行那些任务队列中的回调函数。")])]),t._v(" "),r("h4",{attrs:{id:"循环运行机制"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#循环运行机制"}},[t._v("#")]),t._v(" 循环运行机制")]),t._v(" "),r("ol",[r("li",[r("strong",[t._v("所有任务都在主线程上执行，形成一个执行栈。")])]),t._v(" "),r("li",[r("strong",[t._v('主线程之外，还存在一个"任务队列"（task queue）。只要异步任务有了运行结果，就在"任务队列"之中放置一个事件。')])]),t._v(" "),r("li",[r("strong",[t._v('一旦"执行栈"中的所有同步任务执行完毕，系统就会读取"任务队列"。那些对应的异步任务，结束等待状态，进入执行栈并开始执行。')])]),t._v(" "),r("li",[r("strong",[t._v("主线程不断重复上面的第三步。")])])]),t._v(" "),r("h2",{attrs:{id:"微任务和宏任务"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#微任务和宏任务"}},[t._v("#")]),t._v(" 微任务和宏任务")]),t._v(" "),r("p",[r("strong",[t._v("异步任务分为 宏任务（macrotask） 与 微任务 (microtask)，不同的API注册的任务会依次进入自身对应的队列中，然后等待 Event Loop 将它们依次压入执行栈中执行。")])]),t._v(" "),r("p",[r("strong",[t._v("宏任务(macrotask)：")]),t._v("：")]),t._v(" "),r("p",[r("strong",[t._v("script(整体代码)、setTimeout、setInterval、UI 渲染、 I/O、postMessage、 MessageChannel、setImmediate(Node.js 环境)")])]),t._v(" "),r("p",[r("strong",[t._v("微任务(microtask)：")])]),t._v(" "),r("p",[r("strong",[t._v("Promise、 MutaionObserver、process.nextTick(Node.js环境）")])]),t._v(" "),r("h2",{attrs:{id:"h5"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#h5"}},[t._v("#")]),t._v(" h5")]),t._v(" "),r("p",[r("strong",[t._v("1、拖拽释放（drag and drop）")]),t._v(" "),r("strong",[t._v("2、语义化更好的内容标签（header footer nav aside article section）")]),t._v(" "),r("strong",[t._v("3、音频、视频（audio video）")]),t._v(" "),r("strong",[t._v("4、画布（Canvas）")]),t._v(" "),r("strong",[t._v("5、地理（Geolocation）")]),t._v(" "),r("strong",[t._v("6、localstorage 和 sessionstorage 缓存方式")]),t._v(" "),r("strong",[t._v("7、表单控件（calendar date time email ul search）")]),t._v(" "),r("strong",[t._v("8、新技术（webworker websocket Geolocation）")])]),t._v(" "),r("h2",{attrs:{id:"c3"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#c3"}},[t._v("#")]),t._v(" c3")]),t._v(" "),r("ul",[r("li",[r("strong",[t._v("选择器")])]),t._v(" "),r("li",[r("strong",[t._v("边框与圆角")])]),t._v(" "),r("li",[r("strong",[t._v("背景与渐变")])]),t._v(" "),r("li",[r("strong",[t._v("过渡")])]),t._v(" "),r("li",[r("strong",[t._v("变换")])]),t._v(" "),r("li",[r("strong",[t._v("动画")])])]),t._v(" "),r("h2",{attrs:{id:"es6"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#es6"}},[t._v("#")]),t._v(" es6")]),t._v(" "),r("p",[r("strong",[t._v("let & const")])]),t._v(" "),r("p",[r("strong",[t._v("解构赋值")])]),t._v(" "),r("p",[r("strong",[t._v("对象的解构")])]),t._v(" "),r("p",[r("strong",[t._v("模板字符串")])]),t._v(" "),r("p",[r("strong",[t._v("简化对象写法")])]),t._v(" "),r("p",[r("strong",[t._v("箭头函数")])]),t._v(" "),r("p",[r("strong",[t._v("函数参数的默认值设置")])]),t._v(" "),r("p",[r("strong",[t._v("rest参数")])]),t._v(" "),r("p",[r("strong",[t._v("扩展运算符")])]),t._v(" "),r("p",[r("strong",[t._v("Symbol")])]),t._v(" "),r("p",[r("strong",[t._v("Promise")])]),t._v(" "),r("p",[r("strong",[t._v("set")])]),t._v(" "),r("p",[r("strong",[t._v("Map")])]),t._v(" "),r("h2",{attrs:{id:"promise"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#promise"}},[t._v("#")]),t._v(" promise")]),t._v(" "),r("ul",[r("li",[r("strong",[t._v("概念：promis对象用于标识一个异步操作的最终成果完成(或失败)及其结果值。使得控制异步操作更加容易。可以将异步操作以同步操作的流程表达出来，避免了 层层嵌套的回调函数")])]),t._v(" "),r("li",[r("strong",[t._v("promise是一个构造函数")])]),t._v(" "),r("li",[r("strong",[t._v("promise构造函数原型上的方法，通过创建一个promis实列就行调用")]),t._v(" "),r("ul",[r("li",[r("strong",[t._v("promise.proyotype.then()  成功")])]),t._v(" "),r("li",[r("strong",[t._v("promise.protype.catch()  失败")])]),t._v(" "),r("li",[r("strong",[t._v("primise.prototype.finaly()  最终结果")])])])]),t._v(" "),r("li",[r("strong",[t._v("Promise构造函数静态方法，直接通过Promise函数调用")]),t._v(" "),r("ul",[r("li",[r("strong",[t._v("Promise.all()")])]),t._v(" "),r("li",[r("strong",[t._v("Promise.allSettled()")])]),t._v(" "),r("li",[r("strong",[t._v("Promise.race()")])]),t._v(" "),r("li",[r("strong",[t._v("Promise.reject()")])]),t._v(" "),r("li",[r("strong",[t._v("Promise.resolve()")])])])]),t._v(" "),r("li",[r("strong",[t._v("解决问题：回调地狱")])]),t._v(" "),r("li",[r("strong",[t._v("方法：.then.catch  promise.all()   async await")])])]),t._v(" "),r("h2",{attrs:{id:"本地存储-cookis、localstorage、sessionstorage"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#本地存储-cookis、localstorage、sessionstorage"}},[t._v("#")]),t._v(" 本地存储(cookis、localStorage、sessionStorage)")]),t._v(" "),r("p",[r("strong",[t._v("存储的时间有效期不同")]),t._v(" "),r("strong",[t._v("1、cookie的有效期是可以设置的，默认的情况下是关闭浏览器后失效")]),t._v(" "),r("strong",[t._v("2、sessionStorage的有效期是仅保持在当前页面，关闭当前会话页或者浏览器后就会失效")]),t._v(" "),r("strong",[t._v("3、localStorage的有效期是在不进行手动删除的情况下是一直有效的")])]),t._v(" "),r("p",[r("strong",[t._v("存储的大小不同")]),t._v(" "),r("strong",[t._v("1、cookie的存储是4kb左右，存储量较小，一般页面最多存储20条左右信息")]),t._v(" "),r("strong",[t._v("2、localStorage和sessionStorage的存储容量是5Mb(官方介绍，可能和浏览器有部分差异性)")])]),t._v(" "),r("p",[r("strong",[t._v("与服务端的通信")]),t._v(" "),r("strong",[t._v("1、cookie会参与到与服务端的通信中，一般会携带在http请求的头部中，例如一些关键密匙验证等。")]),t._v(" "),r("strong",[t._v("2、localStorage和sessionStorage是单纯的前端存储，不参与与服务端的通信")])]),t._v(" "),r("p",[r("strong",[t._v("对于浏览器的支持")]),t._v(" "),r("strong",[t._v("1、cookie出现的时间较早，目前见到的浏览器都支持")]),t._v(" "),r("strong",[t._v("2、localStorage和sessionStorage出现的时间较晚，对于版本较低的浏览器不支持")])]),t._v(" "),r("h2",{attrs:{id:"闭包"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#闭包"}},[t._v("#")]),t._v(" 闭包")]),t._v(" "),r("p",[r("strong",[t._v("如果在内部函数使用了外部函数的变量，就会形成闭包，闭包保留了外部环境的引用")]),t._v(" "),r("strong",[t._v("如果内部函数被返回到了外部函数的外面，在外部函数执行完后，依然可以使用闭包里面的值")])]),t._v(" "),r("h4",{attrs:{id:"_1-闭包的形成"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1-闭包的形成"}},[t._v("#")]),t._v(" 1 闭包的形成")]),t._v(" "),r("p",[r("strong",[t._v("在内部函数使用外部函数的变量，就会形成闭包，闭包是当前作用域的延伸")])]),t._v(" "),r("h4",{attrs:{id:"_2-闭包的保持"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2-闭包的保持"}},[t._v("#")]),t._v(" 2 闭包的保持")]),t._v(" "),r("p",[r("strong",[t._v("如果希望在函数调用后，闭包依然保持，就需要将内部函数返回到外部函数的外部")])]),t._v(" "),r("h4",{attrs:{id:"_3-使用闭包要满足两个条件"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_3-使用闭包要满足两个条件"}},[t._v("#")]),t._v(" 3 使用闭包要满足两个条件")]),t._v(" "),r("p",[r("strong",[t._v("1.闭包要形成：在内部函数使用外部函数的变量")])]),t._v(" "),r("p",[r("strong",[t._v("2.闭包要保持：内部函数返回到外部函数的外面")])]),t._v(" "),r("h4",{attrs:{id:"_4-闭包的应用"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_4-闭包的应用"}},[t._v("#")]),t._v(" 4 闭包的应用")]),t._v(" "),r("p",[r("strong",[t._v("1.在函数外部访问私有变量")])]),t._v(" "),r("p",[r("strong",[t._v("2.实现封装")])]),t._v(" "),r("p",[r("strong",[t._v("3.防止污染全局变量")])]),t._v(" "),r("h4",{attrs:{id:"坏处-容易造成内存泄漏"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#坏处-容易造成内存泄漏"}},[t._v("#")]),t._v(" 坏处：容易造成内存泄漏")]),t._v(" "),r("h2",{attrs:{id:"防抖节流"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#防抖节流"}},[t._v("#")]),t._v(" 防抖节流")]),t._v(" "),r("ul",[r("li",[r("strong",[t._v("函数防抖和函数节流都是防止某一时间频繁触发，但是这两兄弟之间的原理却不一样。")])]),t._v(" "),r("li",[r("strong",[t._v("函数防抖是某一段时间内只执行一次，而函数节流是间隔时间执行。")])])]),t._v(" "),r("h2",{attrs:{id:"原型"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#原型"}},[t._v("#")]),t._v(" 原型")]),t._v(" "),r("h2",{attrs:{id:"跨域"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#跨域"}},[t._v("#")]),t._v(" 跨域")]),t._v(" "),r("ul",[r("li",[r("strong",[t._v("JSONP：")]),t._v(" "),r("ul",[r("li",[r("strong",[t._v("JSONP是服务器与客户端跨源通信的常用方法。")])]),t._v(" "),r("li",[r("strong",[t._v("特点：简单使用、适用性好、兼容低版本ie，缺点是只支持get请求，不支持post请求")])]),t._v(" "),r("li",[r("strong",[t._v("核心思想：网页通过添加一个script标签，向服务器请求jsonp数据，服务器收到请求后，将数据放在一个指定名字的回调函数的参数位置传回来")])])])]),t._v(" "),r("li",[r("strong",[t._v("CORS")]),t._v(" "),r("ul",[r("li",[r("strong",[t._v("CORS是W3C标准，属于跨源AJAX请求的根本解决办法。")])]),t._v(" "),r("li",[r("strong",[t._v("1.普通跨域请求：只需服务器端设置Access-Control-Allow-Origin")])]),t._v(" "),r("li",[r("strong",[t._v("2.带cookie跨域请求：前后端都需要进行设置")]),t._v("\n**【前端设置】**根据xhr.withCredentials字段判断是否带有cookie")])])]),t._v(" "),r("li",[r("strong",[t._v("开启webpack本地代理服务器")]),t._v(" "),r("ul",[r("li",[r("strong",[t._v("在webpack.config.js中利用devserve配置本地代理")])]),t._v(" "),r("li",[t._v("**通过proxy  **")])])])]),t._v(" "),r("h2",{attrs:{id:"bfc的理解"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#bfc的理解"}},[t._v("#")]),t._v(" BFC的理解")]),t._v(" "),r("p",[r("strong",[t._v("BFC就是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素。")]),t._v(" "),r("strong",[t._v("解决：外边距重叠、清除元素内部的浮动、制作两栏布局")])]),t._v(" "),r("h2",{attrs:{id:"模块化有哪些方案"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#模块化有哪些方案"}},[t._v("#")]),t._v(" 模块化有哪些方案")]),t._v(" "),r("p",[r("strong",[t._v("导入和导出，其他暂未了解")])]),t._v(" "),r("h2",{attrs:{id:"如何快速定位解决问题"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#如何快速定位解决问题"}},[t._v("#")]),t._v(" 如何快速定位解决问题")]),t._v(" "),r("p",[r("strong",[t._v("阅读报错信息，console的方式打印出来必要的信息，F12")])]),t._v(" "),r("h2",{attrs:{id:"自我介绍"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#自我介绍"}},[t._v("#")]),t._v(" 自我介绍")]),t._v(" "),r("p",[r("strong",[t._v("经历，成长轨迹，潜力，自我认知，意向")])]),t._v(" "),r("h4",{attrs:{id:"ps-重点项目介绍、遇到的难点怎么解决、平时是怎么学习"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#ps-重点项目介绍、遇到的难点怎么解决、平时是怎么学习"}},[t._v("#")]),t._v(" Ps: 重点项目介绍、遇到的难点怎么解决、平时是怎么学习")])])}),[],!1,null,null,null);s.default=_.exports}}]);